# Depth First Search using recursive approach on an undirected graph

# Graph class to represent the graph
class Graph:
    def __init__(self):
        self.graph = {}  # Dictionary to store graph: adjacency list

    def add_edge(self, u, v):
        # Since the graph is undirected, add both connections
        if u not in self.graph:
            self.graph[u] = []
        if v not in self.graph:
            self.graph[v] = []
        self.graph[u].append(v)
        self.graph[v].append(u)

    def dfs(self, start, visited=None):
        if visited is None:
            visited = set()

        visited.add(start)
        print(start, end=' ')  # Visit the node

        for neighbor in self.graph[start]:
            if neighbor not in visited:
                self.dfs(neighbor, visited)

# Example usage
g = Graph()
# Add edges (undirected)
g.add_edge(0, 1)
g.add_edge(0, 2)
g.add_edge(1, 3)
g.add_edge(1, 4)
g.add_edge(2, 5)
g.add_edge(2, 6)

print("Depth First Search starting from vertex 0:")
g.dfs(0)
