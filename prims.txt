import heapq

def prim_mst(graph, start):
    visited = set()
    mst = []
    min_heap = [(0, start, -1)]  # (weight, current_node, parent)

    while min_heap and len(visited) < len(graph):
        weight, u, parent = heapq.heappop(min_heap)
        if u in visited:
            continue
        visited.add(u)
        if parent != -1:
            mst.append((parent, u, weight))  # add edge to MST
        for v, w in graph[u]:
            if v not in visited:
                heapq.heappush(min_heap, (w, v, u))

    return mst

# Graph represented as adjacency list
# Format: node: [(neighbor, weight), ...]
graph = {
    0: [(1, 2), (3, 6)],
    1: [(0, 2), (2, 3), (3, 8), (4, 5)],
    2: [(1, 3), (4, 7)],
    3: [(0, 6), (1, 8), (4, 9)],
    4: [(1, 5), (2, 7), (3, 9)]
}

mst = prim_mst(graph, 0)
print("Minimum Spanning Tree (using Prim's Algorithm):")
for u, v, w in mst:
    print(f"{u} - {v} : {w}")
