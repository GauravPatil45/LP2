def solve_n_queens(n):
    def is_safe(row, col):
        return not cols[col] and not diag1[row - col] and not diag2[row + col]

    def place_queen(row):
        if row == n:
            solutions.append(board[:])
            return
        for col in range(n):
            if is_safe(row, col):
                board[row] = col
                cols[col] = diag1[row - col] = diag2[row + col] = True
                place_queen(row + 1)
                cols[col] = diag1[row - col] = diag2[row + col] = False

    solutions = []
    board = [-1] * n
    cols = [False] * n
    diag1 = {}
    diag2 = {}
    place_queen(0)
    return solutions

# Print board nicely
def print_solutions(solutions):
    for sol in solutions:
        for row in sol:
            line = ['.'] * len(sol)
            line[row] = 'Q'
            print(''.join(line))
        print()

# Example for 4-Queens
n = 4
solutions = solve_n_queens(n)
print(f"Solutions for {n}-Queens:")
print_solutions(solutions)
