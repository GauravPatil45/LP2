def is_safe(node, graph, color, c):
    for neighbor in graph[node]:
        if color[neighbor] == c:
            return False
    return True

def graph_coloring_util(graph, m, color, node):
    if node == len(graph):
        return True

    for c in range(1, m+1):
        if is_safe(node, graph, color, c):
            color[node] = c
            if graph_coloring_util(graph, m, color, node + 1):
                return True
            color[node] = 0  # backtrack
    return False

def graph_coloring(graph, m):
    n = len(graph)
    color = [0] * n
    if graph_coloring_util(graph, m, color, 0):
        return color
    else:
        return None

# Example graph as adjacency list
# 0 - 1 - 2
# |   |
# 3 - 4
graph = {
    0: [1, 3],
    1: [0, 2, 4],
    2: [1],
    3: [0, 4],
    4: [1, 3]
}

m = 3  # Number of colors
result = graph_coloring(graph, m)

if result:
    print("Coloring of graph:", result)
else:
    print("No solution exists with", m, "colors.")
